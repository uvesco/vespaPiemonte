---
title: "Attività di trappolaggio"
description: "Riassunto dell'attività di trappolaggio per settore"
lang: it-IT
format: dashboard
---

```{r setup, include=FALSE}
source("../../scripts/importQfieldCloud.R")
source("../../scripts/calcoliTrappole.R")
library(tidyr)
library(ggplot2)
library(plotly)

```

# Situazione delle trappole

Attualmente su `r nrow(trap)` trappole posate sono attive `r nrow(trap[attive,])` trappole, di queste `r nrow(trap[controllate,])` sono state controllate negli ultimi `r giorniXcontrollata` giorni.

```{r tabellaBuffer, echo=FALSE, warning=FALSE}
# tabella con il numero di trappole per classi di distanza dal nido più vicino
tabTrapBuffer <- data.frame(
  distanza = attributes(table(
    cut(
      trap$distanzaNido,
      breaks = c(0, buffer$distance, Inf),
      dig.lab = 7
    )
  ))$dimnames[[1]],
  totali = as.integer(table(cut(
    trap$distanzaNido,
    breaks = c(0, buffer$distance, Inf)
  ))),
  attive = as.integer(table(cut(
    trap$distanzaNido[attive],
    breaks = c(0, buffer$distance, Inf)
  ))),
  controllate = as.integer(table(cut(
    trap$distanzaNido[controllate],
    breaks = c(0, buffer$distance, Inf)
  )))
)

tabTrapBuffer <- rbind(
  tabTrapBuffer,
  data.frame(
    distanza = "Totale",
    totali = sum(tabTrapBuffer$totali),
    attive = sum(tabTrapBuffer$attive),
    controllate = sum(tabTrapBuffer$controllate)
  )
  
)

#tabTrapBuffer

knitr::kable(tabTrapBuffer, format = "html", caption = "Numero di trappole per classi di distanza dal nido più vicino; attive sono le trappole non rimosse, controllate sono le trappole non rimosse e controllate almeno una volta negli ultimi 30 giorni")

```

## Intensità di trappolaggio

```{r tabellaDensitaBuffer, echo=FALSE, warning=FALSE}
# tabella con la densità di trappole per km2 nelle aree buffer
#numero di trappole per buffer
tabDensity <- data.frame(
  distanza = buffer$distance,
  n = buffer$nTrappoleControllate,
  area = round(buffer$area, 2),
  densita = round(buffer$densita, 2)
  
)

knitr::kable(tabDensity, format = "html", caption = "Densità di trappole controllate per km2 nelle aree buffer")

```

# Controlli


```{r graficoTrappoleMese, echo=FALSE, warning=FALSE}
#| label: graficoTrappoleMese
#| title: Numero di trappole posate per mese
#| description: Grafico a barre del numero di trappole posate per mese
#| output: plotly
#| fig.width: 10
#| fig.height: 6
#| fig.align: center
#| fig.cap: Numero di trappole posate per mese
#| fig.link_text: Visualizza il grafico a tutto schermo
#| fig.link_url: https://plotly.com/~giorgio.guarnera/1/
#| fig.show_link: true
#| fig.save: true
#| fig.filename: trappoleMese
#| 

# grafico a barre del numero di trappole aggiunte nel periodo, cut per mese

trap$Data.posizionamento <- as.Date(trap$Data.posizionamento, origin = "1970-01-01")

trap$AnnoMese <- format(trap$Data.posizionamento, "%Y-%m")

periodo <- min(trap$Data.posizionamento):max(trap$Data.posizionamento)
periodo <- as.Date(periodo, origin = "1970-01-01")
periodo <- format(periodo, "%Y-%m")
periodo <- levels(as.factor(periodo))


tab <- as.data.frame(table(trap$AnnoMese))
colnames(tab) <- c("AnnoMese", "freq")
tab$AnnoMese <- as.character(tab$AnnoMese)

tab <- complete(tab, AnnoMese = periodo, fill=list(freq = 0))

plot_ly(tab, x = ~AnnoMese, y =~freq, colors = "gold") %>%
  add_bars() %>%
  layout(
         xaxis = list(title = "Mese"),
         yaxis = list(title = "Numero di trappole")
         )





```

<!--  grafico a barre del numero di controlli per mese -->

```{r graficoControlliMese, echo=FALSE, warning=FALSE}
#| label: graficoControlliMese
#| title: Numero di controlli per mese
#| description: Grafico a barre del numero di controlli per mese
#| output: plotly
#| fig.width: 10
#| fig.height: 6
#| fig.align: center
#| fig.cap: Numero di controlli per mese

controlli$Data <- as.Date(controlli$data, origin = "1970-01-01")

controlli$Mese <- format(controlli$Data, "%m")
controlli$Anno <- format(controlli$Data, "%Y")
controlli$AnnoMese <- paste(controlli$Anno, controlli$Mese, sep = "-")
controlli$AnnoMese <- as.factor(controlli$AnnoMese)
 
periodo <- min(controlli$data):max(controlli$data)
periodo <- as.Date(periodo, origin = "1970-01-01")
periodo <- format(periodo, "%Y-%m")
periodo <- levels(as.factor(periodo))


tab <- as.data.frame(table(controlli$AnnoMese))
colnames(tab) <- c("AnnoMese", "nControlli")
tab$AnnoMese <- as.character(tab$AnnoMese)

tab <- complete(tab, AnnoMese = periodo, fill=list(nControlli = 0))

plot_ly(tab, x = ~AnnoMese, y =~nControlli, colors = "blue") %>%
  add_bars() %>%
  layout(
         xaxis = list(title = "Mese"),
         yaxis = list(title = "Numero di controlli")
         )

# q: how to change the color of the bars?
# a: 


```

<!-- istogramma per mesi intervallo di controllo -->


```{r graficoIntervalloControllo, echo=FALSE, warning=FALSE}
#| label: graficoIntervalloControllo
#| title: Intervallo di controllo
#| description: Istogramma dell'intervallo di controllo
#| output: plotly
#| fig.width: 10
#| fig.height: 6
#| fig.align: center
#| fig.cap: Intervallo di controllo
#| fig.link_text: Visualizza il grafico a tutto schermo
#| fig.link_url: https://plotly.com/~giorgio.guarnera/1/
#| fig.show_link: true
#| fig.save: true
#| fig.filename: intervalloControllo
#| fig.ext: html
#| fig.keep_md: false
#| fig.keep_html: false
#| fig.keep_pdf: false
#| fig.keep_eps: false
#| fig.keep_svg: false
#| fig.keep_png: true
#| fig.keep_jpg: false
#| fig.keep_json: false
#| fig.keep_csv: true
#| fig.keep_xlsx: true

# boxplot dell'intervallo di controllo per mese-anno

controlli$AnnoMese <- format(controlli$Data, "%Y-%m")
controlli$intervallo <- as.numeric(controlli$intervallo)

plot_ly(controlli, x = ~AnnoMese, y = ~intervallo, type = "box") %>%
  layout(
         xaxis = list(title = "Mese"),
         yaxis = list(title = "Intervallo di controllo (giorni)")
         )

```




<!-- tabelle media intervalli per mese -->
