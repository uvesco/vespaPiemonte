---
title: "Catture"
description: "Risultati"
lang: it-IT
format: dashboard
---

```{r setup, include=FALSE}
source("../../scripts/importGeoPackages.R")
source("../../scripts/calcoliTrappole.R")
library(tidyr)
library(dplyr)
library(ggplot2)
library(plotly)
library(leaflet)
library(DT)

```

# Presenza / assenza

::: panel-tabset
## Grafico

```{r graficoCattureMese, echo=FALSE, warning=FALSE}
#| label: graficoCattureMese
#| title: Numero di catture dei diversi taxa per mese
#| description: Grafico a barre del numero di catture per mese
#| output: plotly
#| fig.width: 10
#| fig.height: 6
#| fig.align: center
#| fig.cap: Numero di catture per mese
#| fig.link_text: Visualizza il grafico a tutto schermo

# grafico a barre dinamico con possibilità di selezionare le colonne (taxon) da visualizzare
# ogni barra è costituita dal numero di trappole che hanno catturato almeno un individuo di quel taxon e dalle trappole che non hanno catturato nulla

controlliGeoTemp <- controlliGeo[, c( taxa$colonne, "Manomissione", "fori", "AnnoMeseMedioCattura")]

# unique(controlliGeoTemp$AnnoMeseMedioCattura)

# periodo

periodo <- min(trap$Data.posizionamento):max(trap$Data.posizionamento)
periodo <- as.Date(periodo, origin = "1970-01-01")
periodo <- format(periodo, "%Y-%m")
periodo <- levels(as.factor(periodo))


# elimino i controlli con manomissione
controlliGeoTemp$Manomissione <- as.logical(controlliGeoTemp$Manomissione)
controlliGeoTemp <- controlliGeoTemp[controlliGeoTemp$Manomissione == FALSE | is.na(controlliGeoTemp$Manomissione),]

# creo dataframe con il numero di catture positive per ogni taxon per mese
cattureTF <- controlliGeoTemp[!is.na(controlliGeoTemp$AnnoMeseMedioCattura),] %>%
  group_by(AnnoMeseMedioCattura) %>%
  summarise(
    across(
      .cols = taxa$colonne,
      .fns = ~ sum(.x > 0, na.rm = T)
    )
  ) %>%
  st_drop_geometry() %>%

# complete the dataframe with the months with no cattures
complete(AnnoMeseMedioCattura = periodo, fill = mapply(function(x,y) { y }, taxa$colonne, rep(0, length(taxa$colonne)), SIMPLIFY = FALSE,USE.NAMES = TRUE)) # soluzione per creare la lista di zeri nominata: https://stackoverflow.com/posts/17842875/revisions


# creo dataframe con il controlli negativi per ogni taxon per mese
controlliTF <- controlliGeoTemp[!is.na(controlliGeoTemp$AnnoMeseMedioCattura),] %>%
  group_by(AnnoMeseMedioCattura) %>%
  summarise(
    across(
      .cols = taxa$colonne,
      .fns = ~ sum(.x == 0, na.rm = T)
    )
  ) %>%
  st_drop_geometry() %>%
  # complete the dataframe with the months with no captures
  complete(AnnoMeseMedioCattura = periodo, fill = mapply(function(x,y) { y }, taxa$colonne, rep(0, length(taxa$colonne)), SIMPLIFY = FALSE,USE.NAMES = TRUE)) # soluzione per creare la lista di zeri nominata: https://stackoverflow.com/posts/17842875/revisions

# unisco i due dataframe
# aggiunta colonna tipo per distinguere tra catture e non catture
controlliTF$tipo <- "assenza"
cattureTF$tipo <- "presenza"

cattureTF <- rbind(cattureTF, controlliTF)

rm(catture, controlliTF)

# plotly


# grafico a barre con plotly con il numero di controlli che hanno catturato almeno un individuo di quel taxon e dei controlli che non ne hanno catturati, con possibilità di selezionare le colonne (taxon) da visualizzare
# 
# ogni barra è costituita dal numero di controlli che hanno catturato almeno un individuo di quel taxon e dai controlli che non hanno catturato nulla

# Create a basic plotly object with the first set of y-variables
p <- plot_ly(data = cattureTF, x = ~AnnoMeseMedioCattura, y = ~get(taxa$colonne[1]), color =  ~tipo, colors = c("lightblue", "red"), type ="bar")

# # Add traces for the remaining y-variables

p <- p %>% add_trace(y = ~Vespa_crabro_tot, visible = FALSE)
p <- p %>% add_trace(y = ~altri_Vespidae, visible = FALSE)
p <- p %>% add_trace(y = ~Apis.mellifera, visible = FALSE)
p <- p %>% add_trace(y = ~Bombus.sp., visible = FALSE)
p <- p %>% add_trace(y = ~Altri_Anthophila, visible = FALSE)
p <- p %>% add_trace(y = ~Lepidoptera, visible = FALSE)
p <- p %>% add_trace(y = ~Sirphidae, visible = FALSE)
p <- p %>% add_trace(y = ~Diptera, visible = FALSE)
p <- p %>% add_trace(y = ~Altro, visible = FALSE)


# q: can you create add_trace without a loop?
# a: yes, you can create add_trace without a loop
# q: can you code it for me?
# 




# p <- layout(p, barmode = "stack")
# p
dropDown <- list()
for(i in 1:nrow(taxa)){
  visibilities <- rep(FALSE, nrow(taxa))
  visibilities[i] <- TRUE
  visibilities <- as.vector(matrix(rep(visibilities, 2), 2, nrow(taxa), byrow = T ))
  dropDown[[i]] <- list(
    method = "update",
    args = list(
      list(visible = visibilities),
      list(title = taxa$etichette[i])
    ),
    label = taxa$etichette[i]
  )
}

# Add layout to include the dropdown menu

p <- p %>%
  layout(
    xaxis = list(title = "mesi"),  # Custom x-axis label
    yaxis = list(title = "controlli"),   # Custom y-axis label
    updatemenus = list(
      list(
        type = "dropdown",
        x = 0.2,
        y = 1.1,
        showactive = TRUE,
        buttons = dropDown
      )
    ),
    barmode = "stack"
  )

p





```

## Dati

```{r datiCattureMese, echo=FALSE}
#| label: datiCattureMese
#| 

# dati relativi al numero di catture dei diversi taxa per mese

knitr::kable(cattureTF)


```
:::

# Quantità

::: panel-tabset
## Grafico

```{r graficoCattureMeseTot, echo=FALSE, warning=FALSE}
#| label: graficoCattureMeseTot
#| title: Numero totale di catture per mese
#| description: Grafico a torta del numero totale di esemplari catturati per taxon con switch del mese
#| output: plotly
#| fig.width: 10
#| fig.height: 6
#| fig.align: center
#| fig.cap: Numero di catture per mese
#| fig.link_text: Visualizza il grafico a tutto schermo
#| 

# grafico a torta del numero totale di esemplari catturati per taxon con switch del mese

# creo dataframe con il numero totale di catture per taxon per mese/anno

cattureTot <- controlliGeoTemp[!is.na(controlliGeoTemp$AnnoMeseMedioCattura),] %>%
  group_by(AnnoMeseMedioCattura) %>%
  summarise(
    across(
      .cols = taxa$colonne,
      .fns = ~ sum(.x, na.rm = T)
    )
  ) %>%
  st_drop_geometry() %>%
  complete(AnnoMeseMedioCattura = periodo, fill = mapply(function(x,y) { y }, taxa$colonne, rep(0, length(taxa$colonne)), SIMPLIFY = FALSE,USE.NAMES = TRUE)) # soluzione per creare la lista di zeri nominata: https://stackoverflow.com/posts/17842875/revisions

# transpose dataframe

cattureTot <- cattureTot %>% 
  pivot_longer(cols = -AnnoMeseMedioCattura, names_to = "taxon", values_to = "catture")

cattureTot$etichette <- taxa$etichette[match(cattureTot$taxon, taxa$colonne)]

mesi <- sort(unique(cattureTot$AnnoMeseMedioCattura))

# put the dataframe in wide format

cattureTot <- cattureTot %>% 
  pivot_wider(names_from = AnnoMeseMedioCattura, values_from = catture)




# plotly

meseInizio <- which(mesi == "2024-02")
mesi <- mesi[meseInizio:length(mesi)]

p <- plot_ly(data = cattureTot, labels = taxa$etichette, values = cattureTot[[mesi[1]]], type = "pie", sort = FALSE, automargin = TRUE)
for(i in 1:length(mesi)){
  p <- p %>% add_pie(labels = taxa$etichette, values = cattureTot[[mesi[i]]], visible = FALSE)
}

dropDown <- list()
for(i in 1:length(mesi)){
  visibilities <- rep(FALSE, length(mesi))
  visibilities[i] <- TRUE
  dropDown[[i]] <- list(
    method = "update",
    args = list(
      list(visible = visibilities)
    ),
    label = mesi[i]
  )
}


p <- p %>% layout(
  updatemenus = list(
    list(
      type = "dropdown",
      x = 0.2,
      y = 1.1,
      showactive = TRUE,
      buttons = dropDown
    )
  )
)

p


```

## Dati

```{r datiCattureMeseTot, echo=FALSE}
#| label: datiCattureMeseTot

# dati relativi al numero totale di catture per mese

knitr::kable(cattureTot[, -1]) 

```
:::

# Quantità Vespidae

```{r graficoCattureMeseVespTot, echo=FALSE, warning=FALSE}
#| label: graficoCattureVespaMeseTot
#| title: Numero totale di catture di Vespidae per mese
#| description: Grafico a torta del numero totale di esemplari catturati per taxon con switch del mese
#| output: plotly
#| fig.width: 10
#| fig.height: 6
#| fig.align: center
#| fig.cap: Numero di catture per mese
#| fig.link_text: Visualizza il grafico a tutto schermo
#| 





cattureTot <- controlliGeoTemp[!is.na(controlliGeoTemp$AnnoMeseMedioCattura),] %>%
  group_by(AnnoMeseMedioCattura) %>%
  summarise(
    across(
      .cols = taxa$colonne,
      .fns = ~ sum(.x, na.rm = T)
    )
  ) %>%
  st_drop_geometry() %>%
  complete(AnnoMeseMedioCattura = periodo, fill = mapply(function(x,y) { y }, taxa$colonne, rep(0, length(taxa$colonne)), SIMPLIFY = FALSE,USE.NAMES = TRUE)) # soluzione per creare la lista di zeri nominata: https://stackoverflow.com/posts/17842875/revisions



# transpose dataframe

cattureTot <- cattureTot %>% 
  pivot_longer(cols = -AnnoMeseMedioCattura, names_to = "taxon", values_to = "catture")

cattureTot$etichette <- taxa$etichette[match(cattureTot$taxon, taxa$colonne)]

# select only vespidae

cattureTot <- cattureTot[grepl("Vesp", cattureTot$taxon),]

cattureTot$etichette <- taxa$etichette[match(cattureTot$taxon, taxa$colonne)]

mesi <- sort(unique(cattureTot$AnnoMeseMedioCattura))


# put the dataframe in wide format

cattureTot <- cattureTot %>% 
  pivot_wider(names_from = AnnoMeseMedioCattura, values_from = catture)




# plotly

meseInizio <- which(mesi == "2024-02")
mesi <- mesi[meseInizio:length(mesi)]

etichette <- taxa$etichette[match(cattureTot$taxon, taxa$colonne)]

p <- plot_ly(data = cattureTot, labels = etichette, values = cattureTot[[mesi[1]]], type = "pie", sort = FALSE, automargin = TRUE)
for(i in 2:length(mesi)){
  p <- p %>% add_pie(labels = etichette, values = cattureTot[[mesi[i]]], visible = FALSE)
}

dropDown <- list()
for(i in 1:length(mesi)){
  visibilities <- rep(FALSE, length(mesi))
  visibilities[i] <- TRUE
  dropDown[[i]] <- list(
    method = "update",
    args = list(
      list(visible = visibilities)
    ),
    label = mesi[i]
  )
}


p <- p %>% layout(
  updatemenus = list(
    list(
      type = "dropdown",
      x = 0.2,
      y = 1.1,
      showactive = TRUE,
      buttons = dropDown
    )
  )
)

p

```

# Catture di Vespa velutina

```{r tabellaCatture, echo=FALSE, warning=FALSE}
# tabella con i dati delle catture di Vespa velutina
# 
# seleziono solo i controlli con cattura di Vespa velutina

cattureVespa <- controlliGeo[controlliGeo$Vespa_velutina_tot > 0, c("data", "DataPrec", "ID", "Vespa_velutina_tot", "distanzaNido")]
cattureVespa <- cattureVespa[order(cattureVespa$data, decreasing = TRUE),] # ordino per data decrescente
# conversione della data in formato leggibile

cattureVespa$data <- as.Date(cattureVespa$data, origin = "1970-01-01")
cattureVespa$DataPrec <- as.Date(cattureVespa$DataPrec, origin = "1970-01-01")

cattureVespa$data <- as.character(cattureVespa$data)
# elimino la geometria
cattureVespa <- st_drop_geometry(cattureVespa)

# # formatto le date in modo leggibile
# 
# cattureVespa$data <- format(cattureVespa$data, "%d/%m/%Y")
# cattureVespa$DataPrec <- format(cattureVespa$DataPrec, "%d/%m/%Y")

# approssimo la distanza dal nido all'intero

cattureVespa$distanzaNido <- round(cattureVespa$distanzaNido, 0)



datatable(cattureVespa, rownames = FALSE, colnames = c("Data controllo", "Data carica", "Trappola","Vespa velutina (individui)", "Distanza dal nido più vicino"), extensions = 'Buttons', options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10, 
    lengthMenu = c(5, 10, 15, 20), 
    searching = TRUE, 
    order = list(list(0, 'asc'))
  ))

```
