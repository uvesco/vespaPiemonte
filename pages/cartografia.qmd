---
title: "Cartografia"
description: "Carta interattiva"
lang: it-IT
format: dashboard
---

```{r setup, include=FALSE}
library(sf)
library(leaflet)
library(leaflet.extras)
library(htmlwidgets)
library(DT)
# library(htmltools)
load("/tmp/qfieldcloudproject/vespaVelutina.RData")
```

<!-- # Trappole -->

```{r mappa, echo=FALSE, warning=FALSE}

# mappa leaflet delle zone di trappolaggio con colori diversi e trasparenza al 50% su openstreetmap con anche i buffer con visibile solo il bordo
# mappa delle trappole con colori diversi per zona e trasparenza al 50%
# 
# conversione coordinate

# preparazione dati --------------------------------------------------------------
zoneTrappolaggio <- st_transform(zoneTrappolaggio, 4326)
zoneTrappolaggio$colore <- rainbow(nrow(zoneTrappolaggio))
buffer <- st_transform(buffer3, 4326) ### ATTENZIONE: passaggio da buffer a buffer3
trap <- trap[trap$attiva == TRUE,]
trap <- st_transform(trap, 4326)
# generazione colori
trap$colore <- "green"
trap$colore[trap$etaBirra > parametri$tempoMassimo] <- "red"
trap$colore[trap$etaBirra >= parametri$tempoMinimo  & trap$etaBirra <= parametri$tempoMassimo] <- "orange"
trap$colore[!is.na(trap$data.rimozione)] <- "white"  
sf_use_s2(FALSE)
# estrazione centroidi delle zone per etichettatura
centers <- st_centroid(zoneTrappolaggio)
# get bounding box of buffer features
bboxDF <- data.frame(matrix(ncol = 4, nrow = nrow(buffer)))
for(i in 1:nrow(buffer)) {
  bboxDF[i,] <- st_bbox(buffer[i,])
}
colnames(bboxDF) <- c("xmin", "ymin", "xmax", "ymax")
bboxDF$diametro <- buffer$distance
bboxDF$centerX <- (bboxDF$xmin + bboxDF$xmax) / 2
bboxDF$centerY <- (bboxDF$ymin + bboxDF$ymax) / 2
# define positions of labels in the extremes of the buffer: N, S, W, E
bufferLabels <- data.frame(matrix(ncol = 2, nrow = nrow(buffer)*4))
bufferLabels$distance <- rep(bboxDF$diametro, each = 4)
bufferLabels$position <- rep(c("N", "S", "W", "E"), nrow(buffer))
colnames(bufferLabels) <- c("x", "y", "distance", "position")

for(i in 1:nrow(buffer)) {
  bufferLabels$x[4*(i-1) + 1] <- bboxDF$centerX[i]
  bufferLabels$y[4*(i-1) + 1] <- bboxDF$ymax[i]
  bufferLabels$x[4*(i-1) + 2] <- bboxDF$centerX[i]
  bufferLabels$y[4*(i-1) + 2] <- bboxDF$ymin[i]
  bufferLabels$x[4*(i-1) + 3] <- bboxDF$xmin[i]
  bufferLabels$y[4*(i-1) + 3] <- bboxDF$centerY[i]
  bufferLabels$x[4*(i-1) + 4] <- bboxDF$xmax[i]
  bufferLabels$y[4*(i-1) + 4] <- bboxDF$centerY[i]
}

bufferLabels <- st_as_sf(bufferLabels, coords = c("x", "y"), crs = 4326)

cattureVespa <- controlliGeo[controlliGeo$Vespa_velutina_tot > 0,]
cattureVespa <- st_transform(cattureVespa, crs = 4326)
nidi <- st_transform(nidi, crs = 4326)

# Define custom square icon
squareIcon <- makeIcon(
  iconUrl = "img/red_square.png",  # Replace with the path to your square icon image
  iconWidth = 12,  # Width of the icon
  iconHeight = 12  # Height of the icon
)

# mappa ------------------------------------------------------------------------

leaflet(options = leafletOptions(zoomControl = TRUE,
                                 minZoom = 3, maxZoom = 15)) %>%
  
  ## sfondi --------------------------------------------------------------
  addProviderTiles("Esri.WorldTopoMap", group = "Esri WorldTopoMap") %>%
  addProviderTiles("OpenTopoMap", group = "Opentopomap") %>%
  # addProviderTiles("Stadia.AlidadeSmooth", group = "Stadia Alida Smooth") %>%
  addProviderTiles("OpenStreetMap.HOT", group = "OSM") %>%
  # addProviderTiles("Stadia.StamenTonerLite", group = "StamenTonerLite") %>%
  # addProviderTiles("Jawg.Terrain") %>%
  
  
  ## settori --------------------------------------------------------------
    addPolygons(data = zoneTrappolaggio, color = "black", weight = 1, fillOpacity = 0.3, fillColor = rainbow(nrow(zoneTrappolaggio)), group = "Zone") %>%
  addLabelOnlyMarkers(data = centers, label = ~nome, group = "Zone", labelOptions = labelOptions(noHide = TRUE, textOnly = TRUE)) %>%

  ## trappole --------------------------------------------------------------
  addCircleMarkers(data = trap, 
                     radius = 4, 
                     color = "white", weight = 1, fillOpacity = 1, fillColor = "#828282", group = "Trappole",
                     label = lapply(paste0(
                              "<b>Trappola</b> <br/>",
                              "id: ", trap$ID, "<br/>",
                              "data di posizionamento: ", format(trap$Data.posizionamento, "%d/%m/%y"), " <br/> ",
                              "comune: ", trap$comune, " (", trap$provin_sig,") <br/> ",
                              "quota: ", trap$elevation, "m <br/> ",
                              "distanza dal primo nido noto: ", round(trap$distanzaNido), "m <br/> "
                              ),
                              htmltools::HTML
                              )) %>%

  ## buffer --------------------------------------------------------------
  addPolygons(data = buffer, color = "black", weight = 1, fillOpacity = 0, fillColor = "black", group = "Buffer nidi 3 anni") %>%
  addLabelOnlyMarkers(data = bufferLabels, label = ~distance, group = "Buffer nidi 3 anni", labelOptions = labelOptions(noHide = TRUE, textOnly = TRUE)) %>%
  
  ## catture --------------------------------------------------------------
  addCircleMarkers(data = cattureVespa, radius = 4, color = "white", weight = 1, fillOpacity = 1, fillColor = "magenta", 
                   label = lapply(paste0(
                                                             "<b>Cattura di <em>Vespa velutina</em></b> <br/>",
                              "trappola: ", cattureVespa$ID, "<br/>",
                              "data del rilevamento: ", format(cattureVespa$data, "%d/%m/%y"), " <br/> ",
                              "numero di individui: ", cattureVespa$Vespa_velutina_tot, " <br/> ",
                              "numero di regine: ", cattureVespa$Vespa_velutina_regine, " <br/> ",
                              "numero di maschi: ", cattureVespa$Vespa_velutina_maschi, " <br/> ",
                              "numero di operaie: ", cattureVespa$Vespa_velutina_operaie, " <br/> ",
                              "comune: ", trap$comune, " (", trap$provin_sig,") <br/> ",
                              "quota: ", cattureVespa$elevation, "m <br/> ",
                              "distanza dal primo nido noto: ", round(cattureVespa$distanzaNido), "m <br/> "
                              ),
                              htmltools::HTML
                              ),
                   
                   group = "Catture") %>%
  
  ## nidi --------------------------------------------------------------
  addMarkers(data = nidi, icon = squareIcon,# radius = 6, color = "black", weight = 1, fillOpacity = 1,
             #color = "red",
                                      label = lapply(paste0(
                              "<b>Nido di <em>Vespa velutina</em></b> <br/>",
                              "id: ", nidi$id2, "<br/>",
                              "data del rilevamento: ", format(nidi$data_ritro, "%d/%m/%y"), " <br/> ",
                              "comune: ", nidi$comune, " <br/> ",
                              "provincia: ", nidi$provin_sig, " <br/> ",
                              "quota: ", nidi$elevation, "m <br/> ",
                              "nido primario: ", nidi$primario, "<br/> "
                              ),
                              htmltools::HTML
                              ),
                   group = "Nidi") %>%

  ## controlli utente --------------------------------------------------------------
  
  ### layers control --------------------------------------------------------------
  addLayersControl(
    baseGroups = c("Esri WorldTopoMap", 
                   "Opentopomap", 
                   # "Stadia Alida Smooth", 
                   "OSM"
                   # "StamenTonerLite"
                   ),
    overlayGroups = c("Nidi", "Catture", "Trappole", "Buffer nidi 3 anni", "Zone"),
    options = layersControlOptions(
      collapsed = TRUE,
      position = "topleft"
      )
  ) %>%
  
  hideGroup(c("Zone", "Buffer nidi 3 anni")) %>%
  
  ### full screen --------------------------------------------------------------
  
  addFullscreenControl() %>%
  
  ### scale bar --------------------------------------------------------------
  
  addScaleBar(position = "bottomleft")


```
