---
title: "Cartografia"
description: "Carta interattiva"
lang: it-IT
format: dashboard
---

```{r setup, include=FALSE}
library(sf)
library(leaflet)
library(htmlwidgets)
library(DT)
load("/tmp/qfieldcloudproject/vespaVelutina.RData")
```

# Trappole

```{r mappa, echo=FALSE, warning=FALSE}

# mappa leaflet delle zone di trappolaggio con colori diversi e trasparenza al 50% su openstreetmap con anche i buffer con visibile solo il bordo
# mappa delle trappole con colori diversi per zona e trasparenza al 50%
# 
# conversione coordinate
zoneTrappolaggio <- st_transform(zoneTrappolaggio, 4326)
zoneTrappolaggio$colore <- rainbow(nrow(zoneTrappolaggio))
buffer <- st_transform(buffer3, 4326) ### ATTENZIONE: passaggio da buffer a buffer3
trap <- st_transform(trap, 4326)
# generazione colori
trap$colore <- "green"
trap$colore[trap$etaBirra > parametri$tempoMassimo] <- "red"
trap$colore[trap$etaBirra >= parametri$tempoMinimo  & trap$etaBirra <= parametri$tempoMassimo] <- "orange"
trap$colore[!is.na(trap$data.rimozione)] <- "white"  
sf_use_s2(FALSE)
# estrazione centroidi delle zone per etichettatura
centers <- st_centroid(zoneTrappolaggio)
# get bounding box of buffer features
bboxDF <- data.frame(matrix(ncol = 4, nrow = nrow(buffer)))
for(i in 1:nrow(buffer)) {
  bboxDF[i,] <- st_bbox(buffer[i,])
}
colnames(bboxDF) <- c("xmin", "ymin", "xmax", "ymax")
bboxDF$diametro <- buffer$distance
bboxDF$centerX <- (bboxDF$xmin + bboxDF$xmax) / 2
bboxDF$centerY <- (bboxDF$ymin + bboxDF$ymax) / 2
# define positions of labels in the extremes of the buffer: N, S, W, E
bufferLabels <- data.frame(matrix(ncol = 2, nrow = nrow(buffer)*4))
bufferLabels$distance <- rep(bboxDF$diametro, each = 4)
bufferLabels$position <- rep(c("N", "S", "W", "E"), nrow(buffer))
colnames(bufferLabels) <- c("x", "y", "distance", "position")

for(i in 1:nrow(buffer)) {
  bufferLabels$x[4*(i-1) + 1] <- bboxDF$centerX[i]
  bufferLabels$y[4*(i-1) + 1] <- bboxDF$ymax[i]
  bufferLabels$x[4*(i-1) + 2] <- bboxDF$centerX[i]
  bufferLabels$y[4*(i-1) + 2] <- bboxDF$ymin[i]
  bufferLabels$x[4*(i-1) + 3] <- bboxDF$xmin[i]
  bufferLabels$y[4*(i-1) + 3] <- bboxDF$centerY[i]
  bufferLabels$x[4*(i-1) + 4] <- bboxDF$xmax[i]
  bufferLabels$y[4*(i-1) + 4] <- bboxDF$centerY[i]
}

bufferLabels <- st_as_sf(bufferLabels, coords = c("x", "y"), crs = 4326)

# creo la mappa

leaflet() %>%
  addProviderTiles("OpenTopoMap") %>%
  # addProviderTiles("OpenStreetMap") %>%
  addPolygons(data = zoneTrappolaggio, color = "black", weight = 1, fillOpacity = 0.3, fillColor = rainbow(nrow(zoneTrappolaggio)), group = "zone") %>%
  # addLabelOnlyMarkers(data = centers, label = ~nome, ) %>%
  addPolygons(data = buffer, color = "black", weight = 1, fillOpacity = 0, fillColor = "white", group = "buffer") %>%
  addCircleMarkers(data = trap, radius = 4, color = "black", weight = 1, fillOpacity = 1, fillColor = ~colore, group = "trappole") %>%
  addLabelOnlyMarkers(data = centers, label = ~nome, group = "zone", labelOptions = labelOptions(noHide = TRUE, textOnly = TRUE)) %>%
  addLabelOnlyMarkers(data = bufferLabels, label = ~distance, group = "buffer", labelOptions = labelOptions(noHide = TRUE, textOnly = TRUE)) %>%
  addLegend("bottomright", colors = c("green", "orange", "red", "white"), labels = c("meno di 14 giorni", "tra 14 e 21 giorni", "più di 21 giorni", "rimosse"), title = "Ultimo controllo delle trappole") %>%
  addLayersControl(
    # baseGroups = c("OpenStreetMap", "OpenTopoMap"),
    overlayGroups = c("zone", "buffer", "trappole"),
                          options = layersControlOptions(collapsed = FALSE)
                          ) %>%
  hideGroup("zone")


```

# Catture

<!-- carta leaflet con i punti di cattura di Vespa velutina -->

```{r mappaCatture, echo=FALSE, warning=FALSE}
# mappa con i punti di cattura di Vespa velutina
# 
# seleziono solo i controlli con cattura di Vespa velutina
cattureVespa <- controlliGeo[controlliGeo$Vespa_velutina_tot > 0,]
cattureVespa <- st_transform(cattureVespa, crs = 4326)
nidi <- st_transform(nidi, crs = 4326)

leaflet() %>%
  addProviderTiles("OpenTopoMap") %>%
  addCircleMarkers(data = nidi, radius = 6, color = "black", weight = 1, fillOpacity = 1, fillColor = "brown", 
                                      label = lapply(paste0(
                              "id: ", nidi$id2, "<br/>",
                              "data del rilevamento: ", format(nidi$data_ritro, "%d/%m/%y"), " <br/> ",
                              "comune: ", nidi$comune, " <br/> ",
                              "provincia: ", nidi$provin_sig, " <br/> ",
                              "quota: ", nidi$elevation, "m <br/> ",
                              "nido primario: ", nidi$primario, "<br/> "
                              ),
                              htmltools::HTML
                              ),
                   
                   
                   group = "nidi") %>%
  addCircleMarkers(data = cattureVespa, radius = 4, color = "black", weight = 1, fillOpacity = 1, fillColor = "yellow", 
                   label = lapply(paste0(
                              "trappola: ", cattureVespa$ID, "<br/>",
                              "data del rilevamento: ", format(cattureVespa$data, "%d/%m/%y"), " <br/> ",
                              "comune: ", cattureVespa$comune, " <br/> ",
                              "provincia: ", cattureVespa$provin_sig, " <br/> ",
                              "quota: ", cattureVespa$elevation, "m <br/> ",
                              "distanza dal primo nido noto: ", round(cattureVespa$distanzaNido), "m <br/> "
                              ),
                              htmltools::HTML
                              ),
                   
                   group = "catture") %>%

# addLegend("bottomright", colors = c("green", "orange", "red", "white"), labels = c("meno di 14 giorni", "tra 14 e 21 giorni", "più di 21 giorni", "rimosse"), title = "Ultimo controllo") %>%
  addLayersControl(overlayGroups = c("catture", "nidi"),
                          options = layersControlOptions(collapsed = FALSE)
                          ) %>%
  hideGroup("zone")

```
